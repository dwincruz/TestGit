@model VMNS.Models.Vehicle

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Body.cshtml";
}
<div class="row justify-content-center mt-3">
    <div class="col-12 " id="secondScene">
        <div class="row">
            <div class="col-lg-3 col-sm-12 col-12">               
            </div>
            <div class="col-lg-12 col-sm-12 col-12">
                <div class="row mb-3 pt-3" style="border-radius:10px">
                    <div class="col-12 my-auto">
                        <h2><i class="ri-dashboard-horizontal-fill text-lra-primary"></i> MAIN DASHBOARD</h2>
                    </div>
                    <div class="col-lg-4 col-md-6 col-sm-6 col-12  mb-4">
                        <div class="rounded p-3 bg-lra-warning box-lra-shadow">
                            <div class="d-flex">
                                <div class="me-auto">
                                    <strong>Registered Vehicles</strong>
                                    <h1 class="fw-bolder text-break m-0">@ViewBag.TotalVehicles</h1>
                                </div>
                                <div class=""><span><i class="ri-roadster-line dashboard-icon" style="font-size:xxx-large"></i></span></div>                                
                            </div>                          
                        </div>
                    </div>
                   @*  <div class="col-lg-3 col-md-6 col-sm-6 col-12  mb-4">
                        <div class="rounded p-3 bg-lra-info box-lra-shadow">
                            <div class="d-flex">
                                <div class="me-auto">
                                    <strong>Officers</strong>
                                    <h1 class="fw-bolder text-break  m-0">@ViewBag.MotorpoolOfficer</h1>
                                </div>
                                <div class=""><span><i class="ri-user-line dashboard-icon" style="font-size:xxx-large"></i></span></div>
                            </div>
                        </div>
                    </div> *@
                    <div class="col-lg-4 col-md-6 col-sm-6 col-12  mb-4" >
                        <div class="rounded p-3 bg-white box-lra-shadow">
                            <div class="d-flex">
                                <div class="me-auto">
                                    <strong>Maintenance Report</strong>
                                    <h1 class="fw-bolder text-break m-0"><a asp-controller="Maintenances" asp-action="History" class="btn border rounded text-capitalize bg-lra-info">View All</a></h1>
                                </div>
                                <div class=""><span><i class="ri-survey-line dashboard-icon" style="font-size:xxx-large"></i></span></div>
                            </div>     
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-6 col-sm-6 col-12  mb-4">
                        <div class="rounded p-3 bg-lra-danger box-lra-shadow">
                            <div class="d-flex">
                                <div class="me-auto">
                                    <strong>Accident Report</strong>
                                    <h1 class="fw-bolder text-break m-0"><a asp-controller="Accidents" asp-action="History" class="btn border rounded text-capitalize bg-lra-warning">View All</a></h1>
                                </div>
                                <div class=""><span><i class="ri-alert-fill dashboard-icon" style="font-size:xxx-large"></i></span></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-9 mb-3 bg-white box-lra-shadow">
                        <div class="rounded p-3">
                            <p class="fw-bold">Vehicle Inspection Status</p>
                            <canvas class="col-12" id="vehicleChart" height="200"></canvas>
                        </div>
                    </div>
                   @*  <div class="col-md-3 col-sm-12 col-12">
                        <div class=" rounded p-3 bg-white box-lra-shadow">
                            <p class="fw-bold">Vehicle Maintenance Occur</p>
                            <canvas class="col-12 rounded p-3" id="maintenancesChart" height="100"></canvas>
                        </div>
                    </div> *@
                    <div class="col-md-3 col-sm-12 col-12" >
                        <div class="rounded p-3 bg-white box-lra-shadow" style="height: 272px;">
                            <p class="fw-bold"><i class="ri-alert-fill text-lra-danger"></i> Vehicle Accidents</p>
                            <canvas class="col-12 rounded p-3" id="accidentsChart" height="200"></canvas>
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-12 col-12">
                        <div class="rounded p-3 bg-white box-lra-shadow">
                            <p class="fw-bold"><i class="ri-alert-fill text-lra-danger"></i> Count of Vehicle per Status</p>
                            <canvas class="col-12 rounded p-3" id="statusChart" height="100"></canvas>
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-12 col-12">
                        <div class="rounded p-3 bg-white box-lra-shadow">
                            <div class="d-flex ">
                                <div class="me-auto"><p class="fw-bold"><i class="ri-survey-line  text-lra-primary" style=""></i> LTO Renewal in Days</p></div>
                                <div class=""><button id="showMore" class="btn btn-sm bg-lra-warning" data-bs-toggle="modal" data-bs-target="#listModal" alt="VIEW ALL"><i class="ri-list-settings-fill"></i></button></div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            </div>
                            <ul class="list-group" id="vehicleLists">

                            </ul>
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-12 col-12">
                        <div class="rounded p-3 bg-white box-lra-shadow">
                            <div class="d-flex ">
                                <div class="me-auto"><p class="fw-bold"><i class="ri-survey-line  text-lra-primary" style=""></i> Insurance Renewal in Days</p></div>
                                <div class=""><button id="showMore" class="btn btn-sm bg-lra-warning" data-bs-toggle="modal" data-bs-target="#insuranceListModal" alt="VIEW ALL"><i class="ri-list-settings-fill"></i></button></div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                            </div>
                            <ul class="list-group" id="insuranceDueList">
                            </ul>
                        </div>
                    </div>
                    <!-- for change oil tracker -->
                    <div class="col-md-3 col-sm-12 col-12">
                        <div class="rounded p-3 bg-white box-lra-shadow">
                            <div class="d-flex ">
                                <div class="me-auto"><p class="fw-bold"><i class="ri-oil-line  text-lra-primary" style=""></i> Change Oil Monitoring</p></div>
                                <div class=""><button id="showmore" class="btn btn-sm bg-lra-warning" data-bs-toggle="modal" data-bs-target="#changeOilListModal" alt="view all"><i class="ri-list-settings-fill"></i></button></div>
                            </div>
                            <ul class="list-group" id="changeOilList">
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="listModal" tabindex="-1" aria-labelledby="listModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="listModalLabel"><i class="ri-survey-line  text-lra-primary" style=""></i> All Vehicle LTO Renewal in Days</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="list-group" id="vehicleChart2">
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn bg-lra-warning text-lra-primary" data-bs-dismiss="modal">Close</button>
              
            </div>
        </div>
    </div>
</div>


<!-- Modal for Insurance Renewal-->
<div class="modal fade" id="insuranceListModal" tabindex="-1" aria-labelledby="listModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="listModalLabel"><i class="ri-survey-line  text-lra-primary" style=""></i> All Vehicle Insurance Renewal in Days</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="list-group" id="allInsuranceDueList">
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn bg-lra-warning text-lra-primary" data-bs-dismiss="modal">Close</button>
              
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="changeOilListModal" tabindex="-1" aria-labelledby="listModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="listModalLabel"><i class="ri-oil-line  text-lra-primary" style=""></i> Change Oil Monitoring</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="list-group" id="allChangeOilList">
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn bg-lra-warning text-lra-primary" data-bs-dismiss="modal">Close</button>
                @* <button type="button" class="btn btn-primary">Save changes</button> *@
            </div>
        </div>
    </div>
</div>




@* <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> *@
<script src="~/js/chart.min.js"></script>
<script>
    const onSearch = () => {
        const searchField = document.querySelector("#searchInput");
        let filter = searchField.value.toUpperCase();

        const lists = document.querySelectorAll("#list li");
        lists.forEach((list) => {
            const text = list.textContent.toUpperCase();
            list.style.display = text.includes(filter) ? "block" : "none";
        });
    };

    const hideByDefault = async (targetElement) => {
        const setTargetElement = await targetElement
        for (let i = 7; i < setTargetElement.length; i++) {

            setTargetElement[i].classList.add('visually-hidden')
        }

    }




    const transferData = async (dataValues) => {
        const setDataValues = await dataValues[0]
        const plateNumberVal = document.querySelector('#plateNumberVal');
        const dateVal = document.querySelector('#dateVal');
        const inspectedVal = document.querySelector('#inspectedVal');
        const mileageVal = document.querySelector('#mileageVal');
        const remarksVal = document.querySelector('#remarksVal');


        plateNumberVal.innerHTML = setDataValues.PlateNo
        dateVal.innerHTML = setDataValues.MaintenanceDate
        inspectedVal.innerHTML = `Inspected by ${setDataValues.InspectedBy}`
        mileageVal.innerHTML = setDataValues.Mileage
        remarksVal.innerHTML = setDataValues.Remarks
    }

    const generatePartsCondition = async (container, modalContainer, dataValues) => {
        const setDataValues = await dataValues
    }
    const generateLists = async (container, container2, dataValues) => {
        const setDataValues = await dataValues
        const setContainer = await container;
        const setContainer2 = await container2;

        const limitedLists = Object.entries(setDataValues).map(([key, value]) => {

            if (key < 6) {
               
                return ` <div class="rounded p-1  box-lra-shadow"><div class="d-flex" >
                            <div class="me-auto col-6" >
                               <div class="" style="font-size:14px" > <strong>${value.PlateNo} </strong></div>
                                       <div class="" style = "font-size:11px" > <span class="badge text-bg-primary " > ${value.Brand} ${value.Model} </span></div></div>
                                           <div class="d-flex align-items-end flex-column col-6" >
                                               <div class="" style = "font-size:14px" ><strong>${value.DueInDays} Days</strong></div >
                                                                    <div class="" style = "font-size:11px;background:${value.DUE};" > <span class="badge" > ${new Date(value.LtoDuedate).toLocaleDateString()}</span></div></div></div></div>
                                            `
            }


        }).join('');

        const lists = Object.entries(setDataValues).map(([key, value]) => {


            

            return ` <div class="rounded p-1  box-lra-shadow"><div class="d-flex" >
                                <div class="me-auto col-6" >
                                   <div class="" style="font-size:14px" > <strong>${value.PlateNo} </strong></div>
                                           <div class="" style = "font-size:11px" > <span class="badge text-bg-primary " > ${value.Brand} ${value.Model} </span></div></div>
                                               <div class="d-flex align-items-end flex-column col-6" >
                                                   <div class="" style = "font-size:14px" ><strong>${value.DueInDays} Days</strong></div >
                                                                        <div class="" style = "font-size:11px;background:${value.DUE};" > <span class="badge" > ${new Date(value.LtoDuedate).toLocaleDateString()}</span></div></div></div></div>
                                                `


        }).join('');



        setContainer.innerHTML = limitedLists
        setContainer2.innerHTML = lists
        hideByDefault(document.querySelectorAll('.vehicle-due-dates'))

    }

    const generateInsuranceLists = async (container, container2, dataValues) => {
        const setDataValues = await dataValues
        const setContainer = await container;
        const setContainer2 = await container2;

        const limitedLists = Object.entries(setDataValues).map(([key, value]) => {

            if (key < 6) {

                return ` <div class="rounded p-1  box-lra-shadow"><div class="d-flex" >
                                        <div class="me-auto col-6" >
                                           <div class="" style="font-size:14px" > <strong>${value.PlateNo} </strong></div>
                                                   <div class="" style = "font-size:11px" > <span class="badge text-bg-primary " > ${value.Brand} ${value.Model} </span></div></div>
                                                       <div class="d-flex align-items-end flex-column col-6" >
                                                           <div class="" style = "font-size:14px" ><strong>${value.DueInDays} Days</strong></div >
                                                                                <div class="" style = "font-size:11px;background:${value.DUE};" > <span class="badge" > ${new Date(value.InsuranceDate).toLocaleDateString()}</span></div></div></div></div>
                                                        `
            }


        }).join('');

        const lists = Object.entries(setDataValues).map(([key, value]) => {




            return ` <div class="rounded p-1  box-lra-shadow"><div class="d-flex" >
                                            <div class="me-auto col-6" >
                                               <div class="" style="font-size:14px" > <strong>${value.PlateNo} </strong></div>
                                                       <div class="" style = "font-size:11px" > <span class="badge text-bg-primary " > ${value.Brand} ${value.Model} </span></div></div>
                                                           <div class="d-flex align-items-end flex-column col-6" >
                                                               <div class="" style = "font-size:14px" ><strong>${value.DueInDays} Days</strong></div >
                                                                                    <div class="" style = "font-size:11px;background:${value.DUE};" > <span class="badge" > ${new Date(value.InsuranceDate).toLocaleDateString()}</span></div></div></div></div>
                                                            `


        }).join('');



        setContainer.innerHTML = limitedLists
        setContainer2.innerHTML = lists
        hideByDefault(document.querySelectorAll('.insurance-due-dates'))

    }

    const generateChangeOilLists = async (container, container2, dataValues) => {
        const setDataValues = await dataValues
        const setContainer = await container;
        const setContainer2 = await container2;

        const limitedLists = Object.entries(setDataValues).map(([key, value]) => {

            if (key < 6) {

                return ` <div class="col-lg-12 col-md-12 col-sm-12 col-12 mb-2" >
                                <div class="d-flex">
                                        <div class="me-auto" style="font-size:14px" > <strong>${value.PlateNo} </strong></div>
                                        <div class="" ><small>${value.currentMileage} / ${value.targetMileage} km</small></div>
                                </div>
                                <div class="progress" >
                                            <div class="progress-bar ${value.colorStatus}" role = "progressbar" style = "width: ${value.currPercentage}%" aria-valuenow="${value.currPercentage}" aria-valuemin="0" aria-valuemax="100" >${value.currPercentage}%</div>
                                </div>
                              </div>`


            }


        }).join('');

        const lists = Object.entries(setDataValues).map(([key, value]) => {

            return ` <div class="col-lg-12 col-md-12 col-sm-12 col-12 mb-2" >
                                    <div class="d-flex">
                                            <div class="me-auto" style="font-size:14px" > <strong>${value.PlateNo} </strong></div>
                                            <div class="" ><small>${value.currentMileage} / ${value.targetMileage} km</small></div>
                                    </div>
                                    <div class="progress" >
                                                <div class="progress-bar ${value.colorStatus}" role = "progressbar" style = "width: ${value.currPercentage}%" aria-valuenow="${value.currPercentage}" aria-valuemin="0" aria-valuemax="100" >${value.currPercentage}%</div>
                                    </div>
                           </div>`




        }).join('');



        setContainer.innerHTML = limitedLists
        setContainer2.innerHTML = lists
        hideByDefault(document.querySelectorAll('.insurance-due-dates'))

    }

    const generateBarChart = async (container, dataValues) => {
        const setDatValues = await dataValues
        const setContainer = await container;
        console.log(setDatValues)

        let labels = setDatValues.map(({ Vehicle, MaintenanceDate, ...entry }) => {
            return `${Vehicle}`
        });


        const totalGoodForServiceData = await setDatValues.map(entry => {
            
            let total = Number(entry.Good) + Number(entry.ForMonitoring) + Number(entry.NeedsRepair) + Number(entry.EmptyValue);
            console.log(total)
            let value = (entry.Good / total) * 100;
            return value == 0 ? null : value.toFixed(2)
        });
        const totalForMonitoringData = await setDatValues.map(entry => {
            let total = Number(entry.Good) + Number(entry.ForMonitoring) + Number(entry.NeedsRepair) + Number(entry.EmptyValue);
            let value = (Number(entry.ForMonitoring) / total) * 100;
            return value == 0 ? null : value.toFixed(2)

        });
        const totalNeedsRepairData = await setDatValues.map(entry => {
            let total = Number(entry.Good) + Number(entry.ForMonitoring) + Number(entry.NeedsRepair) + Number(entry.EmptyValue);
            let value = (Number(entry.NeedsRepair) / total) * 100;
            return value == 0 ? null : value.toFixed(2)

        });
        const totalEmptyData = await setDatValues.map(entry => {
            let total = Number(entry.Good) + Number(entry.ForMonitoring) + Number(entry.NeedsRepair) + Number(entry.EmptyValue);
            let value = (Number(entry.EmptyValue) / total) * 100;
            return value == 0 ? null : value.toFixed(2)

        });
        

        const data = {
            labels: labels, 
            skipNull: true,
            datasets: [
                {
                    label: 'Good',
                    data: totalGoodForServiceData,
                    backgroundColor: 'rgb(30, 50, 92)',
                    borderColor: 'rgba(191, 205, 224, 1)',
                    borderWidth: 1
                    
                   
                },
                {
                    label: 'for Monitoring',
                    data: totalForMonitoringData,
                    backgroundColor: 'rgb(255, 179, 25)',
                    borderColor: 'rgba(255, 255, 51, 1)',
                    borderWidth: 1
                    

                   
                    
                },
                {
                    label: 'Needs Repair/ Replacements',
                    data: totalNeedsRepairData,
                    backgroundColor: 'rgb(146, 20, 12)',
                    borderColor: 'rgba(205, 92, 92, 1)',
                    borderWidth: 1

                    
                },
                {
                    label: 'Not Inpected',
                    data: totalEmptyData,
                    backgroundColor: 'rgb(128, 128, 128)',
                    borderColor: 'rgba(0,0,0,0)',
                    borderWidth: 1

                    
                }

            ]
        };
        if (setContainer.chart) {
            setContainer.chart.destroy();
        }

        const config = {
            type: 'bar',
            data: data,
            options: {
                //barPercentage: 0.5,
                barThickness: 20,
                maintainAspectRatio: true,
                responsive: true,
                layout: {
                    padding: 10
                },
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                    ,
                    tooltip: {
                        callbacks: {
                            label: (tooltipItem) => {
                                console.log(tooltipItem)
                                return `${tooltipItem.dataset.label}: ` + `${tooltipItem.raw}%`;
                            }
                        }
                    }
                    
                },
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: false,
                            text: 'Date',
                            stacked: false,
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: false,
                            text: 'Totality of Parts per status',
                            beginAtZero: true
                        }
                    }
                     
                },
                skipNull: true

                

            }
        };

        setContainer.chart = new Chart(setContainer, config);

    }
    const generateDonutPieChart = async (container, dataValues) => {
        const setContainer = await container;
        const setDataValues = await dataValues;
        const labels = setDataValues.map(entry => entry.itemName);

        const total = setDataValues.map(entry => entry.total);
        const data = {
            labels: labels,
            datasets: [{
                data: total,
                backgroundColor: ['rgb(30, 50, 92)', 'rgb(255, 179, 25)', 'rgb(146, 20, 12)', 'rgb(190, 204, 224)', '#8D99AE', 'rgb(55, 70, 109)', 'rgb(255, 187, 63)', 'rgb(162, 54, 36)', 'rgb(197, 210, 227)', 'rgb(30, 29, 29)'],
                hoverOffset: 4
            }]
        };

        const config = {
            type: 'doughnut',
            data: data
           

        };
       
        setContainer.chart = new Chart(setContainer, config);
       
    }

    const generateDonutPieChartAccidents = async (container, dataValues) => {
        const setContainer = await container;
        const setDataValues = await dataValues;
        const labels = setDataValues.map(entry => entry.itemName);

        const total = setDataValues.map(entry => entry.total);
        const data = {
            labels: labels,
            datasets: [{
                data: total,
                backgroundColor: ['rgb(30, 50, 92)', 'rgb(255, 179, 25)', 'rgb(146, 20, 12)', 'rgb(190, 204, 224)', '#8D99AE', 'rgb(55, 70, 109)', 'rgb(255, 187, 63)', 'rgb(162, 54, 36)', 'rgb(197, 210, 227)', 'rgb(30, 29, 29)'],
                hoverOffset: 4
            }]
        };

        const config = {
            type: 'doughnut',
            data: data,
            options: {
                responsive: true,
                // maintainAspectRatio: false,
                aspectRatio: 1.3
            }

        };

        setContainer.chart = new Chart(setContainer, config);

    }
 
    var maintenancesData = @Json.Serialize(ViewData["MaintenancesData"]);
    var accidentsData = @Json.Serialize(ViewData["AccidentsData"]);
    var vehiclesData = @Json.Serialize(ViewData["VehiclesData"]);
    var lTODueDates = @Json.Serialize(ViewData["LTODueDates"]);
    var insuranceDueDates = @Json.Serialize(ViewData["InsuranceDueDates"]);
    var changeOil = @Json.Serialize(ViewData["ChangeOilList"]);
    var vehicleStat = @Json.Serialize(ViewData["CountOfVehiclePerStat"]);
    
    generateDonutPieChart(document.getElementById('maintenancesChart'), maintenancesData.value);
    generateDonutPieChartAccidents(document.getElementById('accidentsChart'), accidentsData.value);
    generateDonutPieChart(document.getElementById('statusChart'), vehicleStat.value);

    generateBarChart(document.getElementById('vehicleChart'), vehiclesData.value);

    generateLists(document.getElementById('vehicleLists'), document.getElementById('vehicleChart2'), lTODueDates.value)
    generateInsuranceLists(document.getElementById('insuranceDueList'), document.getElementById('allInsuranceDueList'), insuranceDueDates.value)
    generateChangeOilLists(document.getElementById('changeOilList'), document.getElementById('allChangeOilList'), changeOil.value)

    let vehicleInfos;
    const retrieveData = async (url, httpRequest, dataValues) => {
        try {
            const response = await fetch(url, {
                method: httpRequest,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(dataValues)
            });
            if (!response.ok) {
                throw new Error('Check Backend');
            }
            const result = await response.json();
            return result
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    };

</script>


