// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VMNS.Areas.Identity.Data;

#nullable disable

namespace VMNS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240627092451_AddImagePath")]
    partial class AddImagePath
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VMNS.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmpNo")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OfficeId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VMNS.Models.Accident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AccidentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("RepareDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("lu_DamageScaleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.HasIndex("lu_DamageScaleId");

                    b.ToTable("Accidents");
                });

            modelBuilder.Entity("VMNS.Models.Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manuals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpareTires")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tools")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("VMNS.Models.lu_DamageScale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DamageScale")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("lu_DamageScales");
                });

            modelBuilder.Entity("VMNS.Models.lu_EquipmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("lu_EquipmentStatus");
                });

            modelBuilder.Entity("VMNS.Models.lu_FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FuelName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("lu_FuelTypes");
                });

            modelBuilder.Entity("VMNS.Models.lu_Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("OfficeCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("lu_Offices");
                });

            modelBuilder.Entity("VMNS.Models.lu_Transmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TransmissionName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("lu_Transmissions");
                });

            modelBuilder.Entity("VMNS.Models.lu_VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("lu_VehicleTypes");
                });

            modelBuilder.Entity("VMNS.Models.lu_Wheel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("WheelPosition")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("lu_Wheels");
                });

            modelBuilder.Entity("VMNS.Models.lu_WheelDrive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("WheelDrive")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("lu_WheelDrives");
                });

            modelBuilder.Entity("VMNS.Models.Maintenance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateChecked")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Maintenances");
                });

            modelBuilder.Entity("VMNS.Models.Monitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CurrentKM")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAcquired")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistanceLimit")
                        .HasColumnType("int");

                    b.Property<int?>("LifeSpan")
                        .HasColumnType("int");

                    b.Property<Guid?>("MaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ReplacementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceId");

                    b.HasIndex("ReplacementId");

                    b.ToTable("Monitorings");
                });

            modelBuilder.Entity("VMNS.Models.Replacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<int?>("DurationInKM")
                        .HasColumnType("int");

                    b.Property<string>("Parts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Replacements");
                });

            modelBuilder.Entity("VMNS.Models.Sub_BatteryPerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BatteryTerminal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionOfBattery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceId");

                    b.ToTable("Sub_BatteryPerformances");
                });

            modelBuilder.Entity("VMNS.Models.Sub_BrakeTires", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BreakLining")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LifeSpan")
                        .HasColumnType("int");

                    b.Property<Guid?>("MaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TirePressureAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TirePressureBefore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TireTread")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WearPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("lu_WheelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceId");

                    b.HasIndex("lu_WheelId");

                    b.ToTable("Sub_BrakeTires");
                });

            modelBuilder.Entity("VMNS.Models.Sub_InteriorExterior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AirConFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AirConGasket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackupLights")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrakeLights")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Carpet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClutchOperation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DashWarningLights")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyBrakeAdjustment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExteriorLamps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelTankCapBasket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlassAndMirrors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HazardLights")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadLights")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HornOperation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlatesLights")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TailLights")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TurnSignals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WindshieldCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WindshieldWiper")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WiperBlades")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wiring")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceId");

                    b.ToTable("Sub_InteriorExteriors");
                });

            modelBuilder.Entity("VMNS.Models.Sub_UnderHood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AirCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AirConditionerCondenser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alternator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuxiliaryBelt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrakeFluid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClutchReservoirFluid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerBox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolantRecoveryReservoirFluidLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingSystemHoses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriveBelt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElectricFuses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineAirFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FluidLevels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaterHoses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HosesandConnections")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PowerSteering")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RadiatorCore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Washer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceId");

                    b.ToTable("Sub_UnderHoods");
                });

            modelBuilder.Entity("VMNS.Models.Sub_UnderVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AutomaticTransmissionFluid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BallJoints")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrakeLines")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatalyticConverter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConstantVelocityBoots")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coolant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Differential")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriveShaftBoots")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DustCover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineOil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExhaustPipes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FluidLinesConnections")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FluidTankBand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelTankVaporVentSystemsHoses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hoses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Muffler")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutsAndBolts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParkingBrakeCable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShockAbsorber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferCase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransmissionAssembly")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransmissionFluid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UJoints")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wiring")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceId");

                    b.ToTable("Sub_UnderVehicles");
                });

            modelBuilder.Entity("VMNS.Models.Upload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcernId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Uploads");
                });

            modelBuilder.Entity("VMNS.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedOfficer")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ConductionNo")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("InsuranceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceType")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LtoDueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LtoRegDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("lu_FuelTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("lu_TransmissionId")
                        .HasColumnType("int");

                    b.Property<int?>("lu_VehicleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("lu_WheelDriveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("lu_FuelTypeId");

                    b.HasIndex("lu_TransmissionId");

                    b.HasIndex("lu_VehicleTypeId");

                    b.HasIndex("lu_WheelDriveId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("VMNS.Models.VehicleHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleHistories");
                });

            modelBuilder.Entity("VMNS.Areas.Identity.Data.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VMNS.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VMNS.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMNS.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VMNS.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VMNS.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.HasOne("VMNS.Models.lu_Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("VMNS.Models.Accident", b =>
                {
                    b.HasOne("VMNS.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.HasOne("VMNS.Models.lu_DamageScale", "lu_DamageScale")
                        .WithMany()
                        .HasForeignKey("lu_DamageScaleId");

                    b.Navigation("Vehicle");

                    b.Navigation("lu_DamageScale");
                });

            modelBuilder.Entity("VMNS.Models.Extra", b =>
                {
                    b.HasOne("VMNS.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VMNS.Models.Maintenance", b =>
                {
                    b.HasOne("VMNS.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VMNS.Models.Monitoring", b =>
                {
                    b.HasOne("VMNS.Models.Maintenance", "Maintenance")
                        .WithMany()
                        .HasForeignKey("MaintenanceId");

                    b.HasOne("VMNS.Models.Replacement", "Replacement")
                        .WithMany()
                        .HasForeignKey("ReplacementId");

                    b.Navigation("Maintenance");

                    b.Navigation("Replacement");
                });

            modelBuilder.Entity("VMNS.Models.Sub_BatteryPerformance", b =>
                {
                    b.HasOne("VMNS.Models.Maintenance", "Maintenance")
                        .WithMany()
                        .HasForeignKey("MaintenanceId");

                    b.Navigation("Maintenance");
                });

            modelBuilder.Entity("VMNS.Models.Sub_BrakeTires", b =>
                {
                    b.HasOne("VMNS.Models.Maintenance", "Maintenance")
                        .WithMany()
                        .HasForeignKey("MaintenanceId");

                    b.HasOne("VMNS.Models.lu_Wheel", "lu_Wheel")
                        .WithMany()
                        .HasForeignKey("lu_WheelId");

                    b.Navigation("Maintenance");

                    b.Navigation("lu_Wheel");
                });

            modelBuilder.Entity("VMNS.Models.Sub_InteriorExterior", b =>
                {
                    b.HasOne("VMNS.Models.Maintenance", "Maintenance")
                        .WithMany()
                        .HasForeignKey("MaintenanceId");

                    b.Navigation("Maintenance");
                });

            modelBuilder.Entity("VMNS.Models.Sub_UnderHood", b =>
                {
                    b.HasOne("VMNS.Models.Maintenance", "Maintenance")
                        .WithMany()
                        .HasForeignKey("MaintenanceId");

                    b.Navigation("Maintenance");
                });

            modelBuilder.Entity("VMNS.Models.Sub_UnderVehicle", b =>
                {
                    b.HasOne("VMNS.Models.Maintenance", "Maintenance")
                        .WithMany()
                        .HasForeignKey("MaintenanceId");

                    b.Navigation("Maintenance");
                });

            modelBuilder.Entity("VMNS.Models.Vehicle", b =>
                {
                    b.HasOne("VMNS.Models.lu_FuelType", "lu_FuelType")
                        .WithMany()
                        .HasForeignKey("lu_FuelTypeId");

                    b.HasOne("VMNS.Models.lu_Transmission", "lu_Transmission")
                        .WithMany()
                        .HasForeignKey("lu_TransmissionId");

                    b.HasOne("VMNS.Models.lu_VehicleType", "lu_VehicleType")
                        .WithMany()
                        .HasForeignKey("lu_VehicleTypeId");

                    b.HasOne("VMNS.Models.lu_WheelDrive", "lu_WheelDrive")
                        .WithMany()
                        .HasForeignKey("lu_WheelDriveId");

                    b.Navigation("lu_FuelType");

                    b.Navigation("lu_Transmission");

                    b.Navigation("lu_VehicleType");

                    b.Navigation("lu_WheelDrive");
                });

            modelBuilder.Entity("VMNS.Models.VehicleHistory", b =>
                {
                    b.HasOne("VMNS.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
